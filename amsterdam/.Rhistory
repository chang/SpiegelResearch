labs[1:length(labs)][1]
labs[1:3]
labs[1:length(labs)]
labs[1:length(labs)][[2]]
# cleanup feature names
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else{
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
labs
# cleanup feature names
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
labs
labs <- names(dat) %>% as.character()
labs
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
labs[[1:length(labs)]]
labs[1:length(labs)]
l
labs
labs[[1]]
labs[[1]] %>% str
lapply(x, '[[', 1)
lapply(labs, '[[', 1)
lapply(labs, '[[', 1) %>% c()
lapply(labs, '[[', 1) %>% unlist()
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.", 2)
labs
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\..", 2)
labs
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2)
labs
labs
str_split(labs, "\\.", 2)
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2) %>% str_split("\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X")
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
}
labs[1:length(labs)]
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2) %>% str_split("\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X")
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
# cleanup feature names
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2) %>% str_split("\\.", 2)
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
labs[1:length(labs)]
labs
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2)
clean_labels <- function(labs){
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
return(labs)
}
clean_labels <- function(labs){
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
return(lapply(labs, "[[", 1))
}
labs
clean_labels(labs)
labs
clean_labels <- function(labs){
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
return(labs)
return(lapply(labs, "[[", 1))
}
clean_labels(labs)
labs
clean_labels(str_split(labs, "\\.", 2))
clean_labels <- function(labs){
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
return(lapply(labs, "[[", 1))
}
clean_labels(str_split(labs, "\\.", 2))
clean_labels <- function(labs){
for(i in 1:length(labs)){
if (substr(labs[[i]][1], 1, 1) == "X"){
labs[[i]][1] <- labs[[i]][2]
} else if (!is.na(labs[[i]][2])){
labs[[i]][1] <- paste(labs[[i]][1], labs[[i]][2], sep="")
}
}
return(labs)
return(lapply(labs, "[[", 1))
}
clean_labels(str_split(labs, "\\.", 2))
t <- clean_labels(str_split(labs, "\\.", 2))
t
lapply(t, "[[", 1)
lapply(t[29], "[[", 1)
t[29]
correct_Colnames <- function(df) {
delete.columns <- grep("(^X$)|(^X\\.)(\\d+)($)", colnames(df), perl=T)
if (length(delete.columns) > 0) {
row.names(df) <- as.character(df[, grep("^X$", colnames(df))])
#other data types might apply than character or
#introduction of a new separate column might be suitable
df <- df[,-delete.columns]
colnames(df) <- gsub("^X", "",  colnames(df))
#X might be replaced by different characters, instead of being deleted
}
return(df)
}
correct_Colnames(dat)
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2) #%>% clean_labels()
labs
labs
grepl(labs, "X")
grepl(labs, pattern="X")
labs <- names(dat) %>% as.character()
labs
labs[grepl(labs, "X")]
labs[grepl(labs, pattern="X")]
gsub(labs[grepl(labs, pattern="X")], "x", "")
labs[grepl(labs, pattern="X"]] %>% unlist
labs[grepl(labs, pattern="X")] %>% unlist
temp <- labs[grepl(labs, pattern="X")] %>% unlist
str(temp)
gsub(temp, "X", "")
labs <- names(dat) %>% as.character()
labs <- str_split(labs, "\\.\\.", 2)
labs
labs
labs[grepl("X", labs)]
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)]
labs_clean <- labs[grepl("X", labs)]
labs_clean
str_split(labs_clean, "\\.\\.")
labs_clean[grepl("\\.\\.", labs_clean)]
gsub(".*\\.\\.","","1..Distributive")
labs
labs_clean <- labs[grepl("X", labs)]
labs_clean
gsub("X", "", labs_clean)
gsub(".*\\.", "", labs_clean)
labs[grepl("X", labs)] <- labs_clean
labs
# cleanup feature names
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean <- gsub(".*\\.", "", labs_clean)
labs[grepl("X", labs)] <- labs_clean
labs
names(dat) <- labs
ddat
dat
str(dat)
str(dat)
names(dat)[grepl("harm", names(dat))]
labs <- names(dat) %>% as.character()
# import libraries and load data
require(dplyr)
require(magrittr)
require(ggplot2)
require(stringr)
dat <- read.csv("data.csv")
# create response variable
dat$purchase <- ifelse(dat$review_bottomline == "Yes", 1, 0) %>% as.factor()
# clean up feature names
labs <- names(dat) %>% as.character()
labs
labs_clean <- labs[grepl("X", labs)]
labs_clean
gsub(".*\\.", "", labs_clean)
gsub("^.*\\.", "", labs_clean)
gsub("^.*?\\.", "", labs_clean)
gsub(".*?\\.", "", labs_clean)
gsub("^.*?\\.", "", labs_clean)
gsub("^.*??\\.", "", labs_clean)
gsub("^^.*?\\.", "", labs_clean)
gsub("^.*?\\.-1", "", labs_clean)
gsub("^.*?\\.", "", labs_clean)
labs_clean
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean <- gsub("\\.\\.", "\\.", labs_clean)
labs_clean
gsub(".*\\.", "", labs_clean)
labs[grepl("X", labs)] <- gsub("^.*?\\.", "", labs_clean)
names(dat) <- labs
gsub("^.*?\\.", "", labs_clean)
names(dat)
? %>%
?gsub
# clean up feature names
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean <- gsub(pattern="\\.\\.", value="\\.", labs_clean)
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean
labs_clean
dat <- read.csv("data.csv")
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean
labs_clean %>% gsub(pattern="\\.\\.", replacement="\\.")
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="") %>%
gsub(pattern="\\.", replacement="_")
# clean up feature names
labs <- names(dat) %>% as.character()
labs_clean <- labs[grepl("X", labs)]
labs_clean %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="") %>%
gsub(pattern="\\.", replacement="_")
# import libraries and load data
require(dplyr)
require(magrittr)
require(ggplot2)
require(stringr)
dat <- read.csv("data.csv")
# create response variable
dat$purchase <- ifelse(dat$review_bottomline == "Yes", 1, 0) %>% as.factor()
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="") %>%
gsub(pattern="\\.", replacement="_")
names(dat) <- labs
dat
names(dat)
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="") %>%
labs <- gsub(labs, pattern="\\.", replacement="_")
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="") %>%
labs <- gsub(labs, pattern="\\.", replacement="_")
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="")
labs <- gsub(labs, pattern="\\.", replacement="_")
names(dat) <- labs
names(dat)
# import libraries and load data
require(dplyr)
require(magrittr)
require(ggplot2)
require(stringr)
dat <- read.csv("data.csv")
# create response variable
dat$purchase <- ifelse(dat$review_bottomline == "Yes", 1, 0) %>% as.factor()
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="")
labs <- gsub(labs, pattern="\\.", replacement="_")
names(dat) <- labs
summary_reduced <- function(model){
# returns a reduced and more readable model summary
# round coefficients, error and significance values
coefs <- summary(model)$coefficients
coefs[1:2, 1:3] <- coefs[1:2, 1:3] %>% round(2)
return(coefs)
}
fit <- glm(purchase ~ material_harm + emotional_harm)
# import libraries and load data
require(dplyr)
require(magrittr)
require(ggplot2)
require(stringr)
dat <- read.csv("data.csv")
# create response variable
dat$purchase <- ifelse(dat$review_bottomline == "Yes", 1, 0) %>% as.factor()
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="")
labs <- gsub(labs, pattern="\\.", replacement="_")
names(dat) <- labs
fit <- glm(purchase ~ material_harm + emotional_harm)
fit <- glm(purchase ~ material_harm + emotional_harm, dat)
fit <- glm(purchase ~ material_harm + emotional_harm, dat, family="binomial")
summary_reduced(fit)
summary(fit)
names(dat)[grepl("disa", names(dat))]
fit <- glm(purchase ~ Functionality_disappointment + Aesthetic_disappointment, dat, family="binomial")
summary_reduced(fit)
dat$Functionality_disappointment
(2.22-1.44)/1.44
findn <- function(){}
source('~/.active-rstudio-document', echo=TRUE)
findn('revenge')
grepl("revenge", names(dat))
grepl("rev", names(dat))
source('~/.active-rstudio-document', echo=TRUE)
findn('revenge')
source('~/.active-rstudio-document', echo=TRUE)
findn('revenge')
source('~/.active-rstudio-document', echo=TRUE)
findn('revenge')
findn('reven')
findn('rev')
findn('Rev')
findn('call')
findn('Call')
fit <- glm(purchase ~ Revenge_behaviors + Call_to_action,
dat, family="binomial")
summary_reduced(fit)
dat$Revenge_behaviors
table(dat$Revenge_behaviors)
dat$emotional_harm
View(select(dat, emotional_harm, involvement))
findn('think')
View(select(dat, emotional_harm, think_feel))
View(select(dat, involvement, think_feel))
dat %>% filter(involvement==1, think_feel==1)
dat %>% filter(involvement==1, think_feel==1) %>% select(involvement, think_feel)
dat %>% filter(involvement==1, think_feel==1) %>% select(involvement, think_feel) %>% count()
fit1 <- glm(material_harm ~ involvement*think_feel, dat, family="binomial")
summary_reduced(fit1)
fit1 <- glm(material_harm ~ involvement*think_feel, dat, family="binomial")
fit2 <- glm(emotional_harm ~ involvement*think_feel, dat, family="binomial")
summary_reduced(fit1)
summary_reduced(fit2)
summary_reduced <- function(model){
# returns a reduced and more readable model summary
# round coefficients, error and significance values
coefs <- summary(model)$coefficients
coefs[1:2, 1:3] <- coefs[1:2, 1:3] %>% round(2)
return(coefs)
}
summary_reduced(fit1)
t <- summary(fit1)
t <- summary(fit1)#coefficients
t
t <- summary(fit1)$coefficients
t
t[1:2, 1:3] %>% round(2)
t[1:2, 1:3] <-  t[1:2, 1:3] %>% round(2)
t
t[1:2, 1:3] =  t[1:2, 1:3] %>% round(2)
t
t
t
t[1:2, 1:3] =  t[1:2, 1:3] %>% round(3)
t[1:2, 1:3] %>% round(3)
t[1:2, 1:3] %>% round(3)
t
str(t)
t
round(t, 2)
round(t, 3)
t[1:2, 1:3] =  t[1:2, 1:3] %>% round(2)
t[1:2, 1:3] =  t[1:2, 1:3] %>% round(2) %>% as.character()
t
t <- summary(fit1,digits=3)$coefficients
t
?summary
t <- summary(fit1,digits=3)
t
t <- summary(fit1,digits=3)
t$cov.unscaled
t$terms
t$coefficients
t
t$coefficients
t <- t$coefficients
t
str(t)
dim(t)
summary_reduced <- function(model){
# returns a reduced and more readable model summary
# round coefficients, error and significance values
coefs <- summary(model)$coefficients
rows <- dim(t)[1]
cols <- dim(t)[2]
coefs[1:rows, 1:(cols-1)] <- coefs[1:rows, 1:(cols-1)] %>% round(2)
return(coefs)
}
fit1 <- glm(material_harm ~ involvement*think_feel, dat, family="binomial")
fit1
summary_reduced(fit1)
fit <- glm(purchase ~ material_harm + emotional_harm, dat, family="binomial")
summary_reduced(fit)
names(dat)
identity_frame_vars <- dat %>% select(23:28)
identity_frame_vars
identity_frame_vars %>% names
rowSums(identity_frame_vars)
View(identity_frame_vars)
identity_frame_vars <- rowSums(dat %>% select(23:28))
identity_frame_vars
ifelse(identity_frame_vars != 0, 1, 0)
summary_reduced(fit)
identity_frame_vars <- rowSums(dat %>% select(23:28))
dat$identity_frame <- ifelse(identity_frame_vars != 0, 1, 0)
fit <- glm(purchase ~ identity_frame, dat, family = "binomial")
summary_reduced(fit)
# import libraries and load data
require(dplyr)
require(magrittr)
require(ggplot2)
require(stringr)
dat <- read.csv("data.csv")
# create response variable
dat$purchase <- ifelse(dat$review_bottomline == "Yes", 1, 0) %>% as.factor()
# clean up feature names
labs <- names(dat) %>% as.character()
labs[grepl("X", labs)] <-
labs[grepl("X", labs)] %>%
gsub(pattern="\\.\\.", replacement="\\.") %>%
gsub(pattern="^.*?\\.", replacement="")
labs <- gsub(labs, pattern="\\.", replacement="_")
names(dat) <- labs
summary_reduced <- function(model){
# returns a reduced and more readable model summary
# round coefficients, error and significance values
coefs <- summary(model)$coefficients
rows <- dim(coefs)[1]
cols <- dim(coefs)[2]
coefs[1:rows, 1:(cols-1)] <- coefs[1:rows, 1:(cols-1)] %>% round(2)
return(coefs)
}
fit <- glm(purchase ~ material_harm + emotional_harm, dat, family="binomial")
summary_reduced(fit)
fit1 <- glm(material_harm ~ involvement*think_feel, dat, family="binomial")
fit2 <- glm(emotional_harm ~ involvement*think_feel, dat, family="binomial")
summary_reduced(fit1)
summary_reduced(fit2)
identity_frame_vars <- rowSums(dat %>% select(23:28))
dat$identity_frame <- ifelse(identity_frame_vars != 0, 1, 0)
fit <- glm(purchase ~ identity_frame, dat, family = "binomial")
summary_reduced(fit)
fit <- glm(purchase ~ Revenge_behaviors + Call_to_action,
dat, family="binomial")
summary_reduced(fit)
table(dat$Revenge_behaviors)
fit <- glm(purchase ~ Functionality_disappointment + Aesthetic_disappointment,
dat, family="binomial")
summary_reduced(fit)
